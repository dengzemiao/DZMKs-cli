declare global {
    const CI_VERSION: string

    // compiler不能放在ci工具的dependencies，只能复制一份了
    interface TrackMsg {
        total: number;
        compiled: number;
        analyzeTime: number;
        compileTime: number;
    }
    interface CompileErrorMessage {
        type: 'compile-error';
        level: 'error' | 'warning';
        data: ErrorMsg;
    }
    interface CompileTrackMessage {
        type: 'compile-track';
        data: TrackMsg;
    }
    interface CompileSingleFileMessage {
        type: "compile-single-file";
        data: {
            filename: string;
            compileSingleFileCost: number;
            fileSize: number;
        };
    }
    declare type CompileMessage = CompileErrorMessage | CompileTrackMessage | CompileSingleFileMessage;
    
    interface UploadMessage {
       type: 'upload-progress',
       data: {
           percent: number;
           transferred: number;
           total?: number;
       }
   }
   
    type ProgressUpdateEvent = UploadMessage | CompileMessage
   
   
    type ProjectType = 'miniProgram';
   
    interface IProject {
       appid: string;
       type: ProjectType;
       projectPath: string;
       privateKey: string;
       ignores: string[],
   }
   
   
    interface IUploadOptions {
       project: IProject,
       version: string,
       desc: string,
       onProgressUpdate: (msg: ProgressUpdateEvent) => void
   }
    interface IResult {
       subPackageInfo: Array<{ name: string, size: number }>,
   }
   
    interface IPreviewOptions {
       project: IProject,
       onProgressUpdate: (msg: ProgressUpdateEvent) => void,
       qrcodeFormat: 'image' | 'base64' | 'terminal',
       qrcodeOutputDest: string,
       pagePath?: string,
       searchQuery?: string,
       scene?: string
   }
    interface ExtConfig {
       extEnable: boolean;
       [key: string]: any;
   }
    interface ICreateProjectOptions {
       appid: string,
       type: ProjectType,
       projectPath: string,
       privateKeyPath: string,
       ignores: Array<string>,
   }
}
export declare class Project implements IProject {
    appid: string;
    type: ProjectType;
    projectPath: string;
    privateKey: string;
    ignores: string[];
    pages: string[];
    constructor(options: ICreateProjectOptions);
}
export declare const upload: (options: IUploadOptions) => Promise<IResult>;
export declare const preview: (options: IPreviewOptions) => Promise<IResult>;
export declare const proxy: (url: string) => void;